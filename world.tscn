[gd_scene load_steps=13 format=2]

[ext_resource path="res://no_constr.tscn" type="PackedScene" id=1]
[ext_resource path="res://constr.tscn" type="PackedScene" id=2]
[ext_resource path="res://Alatsi-Regular.ttf" type="DynamicFontData" id=3]
[ext_resource path="res://fabrik.tscn" type="PackedScene" id=4]
[ext_resource path="res://addons/IKFabrikGodot2D/examples/angles.tscn" type="PackedScene" id=5]
[ext_resource path="res://world.tres" type="Theme" id=6]
[ext_resource path="res://key_snip.tscn" type="PackedScene" id=7]
[ext_resource path="res://example/example.tscn" type="PackedScene" id=8]
[ext_resource path="res://pause_screen.tscn" type="PackedScene" id=9]

[sub_resource type="GDScript" id=1]
script/source = "extends Control


var scenes = []
var slide_buttons = []

var roadmap_dic = {
		\"implementing kinematic chain\" : [true, [], []],
		\"make class_name for using the script\" : [true, [], []],
		\"make angle constraints work\" : [true, [
			\"prevent unexpected result for angles\"
		], [false]],
		\"make a FABRIK explanation scene\" : [true, [
			\"fix the tween animation\",
			\"fix the segments and construction lines animation\",
			\"next steps with iterations\",
			\"add/delete points for demostration\",
			\"apply constraint logic to the chain\"
		] , [true, true, true, true, false] ],
		\"make an example scene\" : [false, [
			\"create procedural terrain\",
			\"make an example with procedural animation\",
			\"make a procedural animation that follow the terrain\",
		] , [true, true, false]],
		\"finalize the addon\" : [false, [
			\"test the addon\",
			\"publish the addon on the assetLib\"
		] , [false, false]]
	}


func _ready():
	# initialize scenes array
	for scene in $layout/middle/right/scenes.get_children():
		scenes.append(scene)
	
	
	# delete existing example buttons
	for button in $layout/bottom/slides_ctrl.get_children():
		button.free()
	
	# create slides buttons
	for i in range(scenes.size()):
		var new_button = Button.new()
		new_button.text = scenes[i].name
		# connect button pressed to \"swow_slide\" passing the index as argument
		new_button.connect(\"pressed\", self, \"show_slide\", [i])
		$layout/bottom/slides_ctrl.add_child(new_button)
	
	compile_roadmap_tree()
	$layout/title/btn_road.connect(\"toggled\", self, \"set_roadmap_visible\")
	$layout/title/btn_road.pressed = $layout/middle/left.visible


func compile_roadmap_tree():
	var tree = $layout/middle/left/roadmap
	var root = tree.create_item()
	
	tree.set_column_expand(0, false)
	tree.set_column_min_width(0, 48)
	
	for key in roadmap_dic.keys():
		var branch = tree.create_item(root)
#		var check = tree.create_item(root)
		
		
		branch.set_text(1, key)
		branch.set_cell_mode(0, TreeItem.CELL_MODE_CHECK)
		branch.set_checked(0, roadmap_dic[key][0])
		
		if not roadmap_dic[key][1].empty():
			for i in range( roadmap_dic[key][1].size() ):
				var leaf = tree.create_item(branch)
				leaf.set_text(1, \"- \"+(roadmap_dic[key][1][i])  )
				leaf.set_cell_mode(0, TreeItem.CELL_MODE_CHECK)
				leaf.set_checked(0, roadmap_dic[key][2][i])


func show_slide(slide : int):
	# hide all scene first
	for scene in scenes:
		scene.visible = false
	
	if slide > scenes.size()-1:
		return
	
	scenes[slide].visible = true




func _input(event):
	if event is InputEventKey and event.is_pressed():
		if event.scancode == KEY_F:
			OS.window_fullscreen = not OS.window_fullscreen
			


func set_roadmap_visible(val):
	$layout/middle/left.visible = val
"

[sub_resource type="DynamicFont" id=2]
size = 40
use_mipmaps = true
use_filter = true
font_data = ExtResource( 3 )

[sub_resource type="GDScript" id=3]
script/source = "extends Position2D



func _process(_delta):
	global_position = get_global_mouse_position()
#	update()

func _draw():
	pass
#	draw_circle(Vector2(), 5, Color.lightcoral)
"

[node name="world" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
theme = ExtResource( 6 )
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="bg" type="ColorRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 0.0901961, 0.247059, 0.372549, 1 )
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="layout" type="VBoxContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
custom_constants/separation = 0
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="title" type="Label" parent="layout"]
margin_right = 1680.0
margin_bottom = 107.0
custom_fonts/font = SubResource( 2 )
text = "Inverse kinematic (FABRIK)
for Godot 2D"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="btn_road" type="Button" parent="layout/title"]
anchor_bottom = 1.0
margin_left = 22.0
margin_top = 16.0
margin_right = 235.0
margin_bottom = -17.0
focus_mode = 0
toggle_mode = true
enabled_focus_mode = 0
text = "Roadmap"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="middle" type="HSplitContainer" parent="layout"]
margin_top = 107.0
margin_right = 1680.0
margin_bottom = 944.0
size_flags_horizontal = 3
size_flags_vertical = 3
split_offset = 406

[node name="left" type="Control" parent="layout/middle"]
margin_right = 406.0
margin_bottom = 837.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="lb" type="Label" parent="layout/middle/left"]
anchor_right = 1.0
margin_bottom = 36.0
text = "Roadmap"
align = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="roadmap" type="Tree" parent="layout/middle/left"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = 44.0
columns = 2
hide_root = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="right" type="Control" parent="layout/middle"]
margin_left = 418.0
margin_right = 1680.0
margin_bottom = 837.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="scenes" type="Control" parent="layout/middle/right"]
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 3
size_flags_vertical = 3
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Free Operator" parent="layout/middle/right/scenes" instance=ExtResource( 1 )]
visible = false
target = NodePath("../../../../../target")

[node name="Constrained Operator" parent="layout/middle/right/scenes" instance=ExtResource( 2 )]
visible = false
target = NodePath("../../../../../target")

[node name="FABRIK explanation" parent="layout/middle/right/scenes" instance=ExtResource( 4 )]
visible = false

[node name="Angles calculation" parent="layout/middle/right/scenes" instance=ExtResource( 5 )]
visible = false

[node name="Example Scene" type="ViewportContainer" parent="layout/middle/right/scenes"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
stretch = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="example" parent="layout/middle/right/scenes/Example Scene" instance=ExtResource( 8 )]
margin_left = -404.0
margin_top = 13.0
margin_right = -404.0
margin_bottom = 13.0

[node name="Pause Stream" parent="layout/middle/right/scenes" instance=ExtResource( 9 )]
visible = false
brb_time = 300

[node name="key_snip" parent="layout/middle/right" instance=ExtResource( 7 )]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -244.0
margin_top = 0.0
margin_right = -24.0
margin_bottom = 837.0

[node name="bottom" type="ColorRect" parent="layout"]
margin_top = 944.0
margin_right = 1680.0
margin_bottom = 1024.0
rect_min_size = Vector2( 0, 80 )
mouse_filter = 2
color = Color( 0.0705882, 0.0784314, 0.109804, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="slides_ctrl" type="HBoxContainer" parent="layout/bottom"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 7.0
margin_top = 9.0
margin_right = -7.0
margin_bottom = -10.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ex_no_constr" type="Button" parent="layout/bottom/slides_ctrl"]
margin_right = 311.0
margin_bottom = 61.0
focus_mode = 0
enabled_focus_mode = 0
text = "No constraint operator"

[node name="ex_constr" type="Button" parent="layout/bottom/slides_ctrl"]
margin_left = 315.0
margin_right = 609.0
margin_bottom = 61.0
focus_mode = 0
enabled_focus_mode = 0
text = "Constrained operator"

[node name="fabrik" type="Button" parent="layout/bottom/slides_ctrl"]
margin_left = 613.0
margin_right = 882.0
margin_bottom = 61.0
focus_mode = 0
enabled_focus_mode = 0
text = "FABRIK explanation"

[node name="angles" type="Button" parent="layout/bottom/slides_ctrl"]
margin_left = 886.0
margin_right = 1129.0
margin_bottom = 61.0
focus_mode = 0
enabled_focus_mode = 0
text = "Angles definition"

[node name="target" type="Position2D" parent="."]
position = Vector2( 854.144, 813.377 )
script = SubResource( 3 )
